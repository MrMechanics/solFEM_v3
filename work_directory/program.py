#
#
#	program.py
#  --------------
#
#	Start the module specified by the user
#	Either solFEM or viewFEM
#


import sys
sys.path.insert(1, '../Objects')
sys.path.insert(1, '../Modules')

from solFEM import *
from viewFEM import *




if __name__ == '__main__':


	modSelected = False

	print( '\n\n' )
	while modSelected == False:

		print( '\tWhat module do you wish to use?' )
		print( '\t-----------------------------\n' )
		print( '\tsolFEM  - FE-solver			[s]' )
		print( '\tviewFEM - FE-viewer			[v]' )
		modSelect = input('\n\ts/v: ')


		if modSelect in ['s', 'S']:
			print( '\n\n\t\tsolFEM v2.0' )
			print( '\tFinite Element Solver' )
			print( '\t--------------------------\n' )
			print( '\tThis finite element solver takes input solver files (.sol)' )
			print( '\tand generates displacement, stress, strain and more results' )
			print( '\tas requested in the solver files.' )

			fname = input('\n\n\tsolver-file: ')
			inputobj = InputData(fname)
			if inputobj.input_error == False:
				model = FEModel(inputobj)
			else:
				print( '\n\tSolver aborted because of input error(s).' )
			modSelected = True


		elif modSelect in ['v', 'V']:
			print( '\n\n\t\tviewFEM v2.0' )
			print( '\tFinite Element Viewer' )
			print( '\t--------------------------\n' )
			print( '\tThis interactive 3D viewer loads results from the *.obj-file' )
			print( '\tthat was generated by solFEM. It can show contour plots of' )
			print( '\tdisplacements, stresses, strains and also node forces.' )
			print( '\n\tAnimated eigenmodes are also supported. For modal dynamic' )
			print( '\tsolutions (accelerations, velocities and displacements)' )
			print( '\tgraphs made with matplotlibs pyplot are used.' )
			print( '\n\t\tCamera controls:' )
			print( '\trotate view --> ctrl + alt + left mouse button' )
			print( '\tzoom        --> right mouse button' )
			print( '\tpan view    --> mouse wheel click' )
			print( '\tdrag select --> left mouse button\n' )

			app = QtWidgets.QApplication(['viewFEM - Finite Element Viewer'])

			pix = QtGui.QPixmap('../Splash/elements.png')
			lbl = QtWidgets.QLabel('<font color=Black size=12><b> solFEM v.2 </b></font>')
			lbl.setPixmap(pix.scaledToWidth(800))
			lbl.setWindowFlags(QtCore.Qt.SplashScreen | QtCore.Qt.FramelessWindowHint | 
								QtCore.Qt.WindowStaysOnTopHint)
			lbl.show()
			QtCore.QTimer.singleShot(2000,lbl.close)

			window = UserInterface()
			window.show()
			app.exec_()
			modSelected = True


		else:
			print( '\n\tyou must choose s or v. Try again...' )


	print( '\n\n\tProgram closing...\n\n' )


